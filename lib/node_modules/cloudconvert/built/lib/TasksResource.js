"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const form_data_1 = __importDefault(require("form-data"));
const axios_1 = __importDefault(require("axios"));
class TasksResource {
    constructor(cloudConvert) {
        this.cloudConvert = cloudConvert;
    }
    get(id, query = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.get('tasks/' + id, {
                params: query || {}
            });
            return response.data.data;
        });
    }
    wait(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.get('tasks/' + id + '/wait');
            return response.data.data;
        });
    }
    cancel(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.post('tasks/' + id + '/cancel');
            return response.data.data;
        });
    }
    all(query = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.get('tasks', {
                params: query || {}
            });
            return response.data.data;
        });
    }
    create(operation, data = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.post(operation, data);
            return response.data.data;
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cloudConvert.axios.delete('tasks/' + id);
        });
    }
    upload(task, stream, filename = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (task.operation !== 'import/upload') {
                throw new Error('The task operation is not import/upload');
            }
            if (task.status !== 'waiting' || !task.result || !task.result.form) {
                throw new Error('The task is not ready for uploading');
            }
            const formData = new form_data_1.default();
            for (const parameter in task.result.form.parameters) {
                formData.append(parameter, task.result.form.parameters[parameter]);
            }
            let fileOptions = {};
            if (filename) {
                fileOptions = { filename };
            }
            formData.append('file', stream, fileOptions);
            return yield axios_1.default.post(task.result.form.url, formData, {
                maxContentLength: Infinity,
                maxBodyLength: Infinity,
                headers: Object.assign({}, formData.getHeaders())
            });
        });
    }
    subscribeEvent(id, event, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.cloudConvert.subscribe('private-task.' + id, 'task.' + event, callback);
        });
    }
}
exports.default = TasksResource;
//# sourceMappingURL=TasksResource.js.map