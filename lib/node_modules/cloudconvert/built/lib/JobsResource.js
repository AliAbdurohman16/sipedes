"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class JobsResource {
    constructor(cloudConvert) {
        this.cloudConvert = cloudConvert;
    }
    get(id, query = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.get('jobs/' + id, {
                params: query || {}
            });
            return response.data.data;
        });
    }
    wait(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.get('jobs/' + id + '/wait');
            return response.data.data;
        });
    }
    all(query = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.get('jobs', {
                params: query || {}
            });
            return response.data.data;
        });
    }
    create(data = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cloudConvert.axios.post('jobs', data);
            return response.data.data;
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cloudConvert.axios.delete('jobs/' + id);
        });
    }
    subscribeEvent(id, event, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.cloudConvert.subscribe('private-job.' + id, 'job.' + event, callback);
        });
    }
    subscribeTaskEvent(id, event, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this.cloudConvert.subscribe('private-job.' + id + '.tasks', 'task.' + event, callback);
        });
    }
}
exports.default = JobsResource;
//# sourceMappingURL=JobsResource.js.map