"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const socket_io_client_1 = __importDefault(require("socket.io-client"));
const JobsResource_1 = __importDefault(require("./JobsResource"));
const TasksResource_1 = __importDefault(require("./TasksResource"));
const UsersResource_1 = __importDefault(require("./UsersResource"));
const WebhooksResource_1 = __importDefault(require("./WebhooksResource"));
const package_json_1 = require("../package.json");
class CloudConvert {
    constructor(apiKey, useSandbox = false) {
        this.apiKey = apiKey;
        this.useSandbox = useSandbox;
        this.createAxiosInstance();
        this.createResources();
    }
    createAxiosInstance() {
        this.axios = axios_1.default.create({
            baseURL: this.useSandbox
                ? 'https://api.sandbox.cloudconvert.com/v2/'
                : 'https://api.cloudconvert.com/v2/',
            headers: {
                Authorization: 'Bearer ' + this.apiKey,
                'User-Agent': 'cloudconvert-node/v' +
                    package_json_1.version +
                    ' (https://github.com/cloudconvert/cloudconvert-node)'
            }
        });
    }
    createResources() {
        this.tasks = new TasksResource_1.default(this);
        this.jobs = new JobsResource_1.default(this);
        this.users = new UsersResource_1.default(this);
        this.webhooks = new WebhooksResource_1.default(this);
    }
    subscribe(channel, event, callback) {
        var _a, _b;
        if (!this.socket) {
            this.socket = socket_io_client_1.default.connect(this.useSandbox
                ? 'https://socketio.sandbox.cloudconvert.com'
                : 'https://socketio.cloudconvert.com', {
                transports: ['websocket']
            });
            this.subscribedChannels = new Map();
        }
        if (!((_a = this.subscribedChannels) === null || _a === void 0 ? void 0 : _a.get(channel))) {
            this.socket.emit('subscribe', {
                channel,
                auth: {
                    headers: {
                        Authorization: 'Bearer ' + this.apiKey
                    }
                }
            });
            (_b = this.subscribedChannels) === null || _b === void 0 ? void 0 : _b.set(channel, true);
        }
        this.socket.on(event, function (eventChannel, eventData) {
            if (channel !== eventChannel) {
                return;
            }
            callback(eventData);
        });
    }
    closeSocket() {
        var _a;
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.close();
    }
}
exports.default = CloudConvert;
//# sourceMappingURL=CloudConvert.js.map